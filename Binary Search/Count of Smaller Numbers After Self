https://leetcode.com/problems/count-of-smaller-numbers-after-self/


iterate the array in reverse order

insert each element in sorted list in sorted order and take its index and then update that index in our arr as count, that index is the count of smaller elemnt to its right

example
arr = [3,4,9,6,1]
sorted list
Iterate form n-1 to 0:

Insert: 1
Sorted list: [1]
Index of newly insert item: 0
result: [0, 0, 0, 0, 0]


Insert: 6
Sorted list: [1,6]
Index of newly insert item: 1
result: [0, 0, 0, 1, 0]

Insert: 9
Sorted list: [1,6,9]
Index of newly insert item: 2
result: [0, 0, 2, 1, 0]

Insert: 4
Sorted list: [1,4,6,9]
Index of newly insert item: 1
result: [0, 1, 2, 1, 0]

Insert: 3
Sorted list: [1,3,4,6,9]
Index of newly insert item: 1
result: [1, 1, 2, 1, 0]



class Solution {
    public List<Integer> countSmaller(int[] nums) {
        int n = nums.length;
        List<Integer> sortedList = new ArrayList<>();
        Integer[] res = new Integer[n];
        for (int i = n - 1; i >= 0; i--) {
            int left = 0, right = sortedList.size();
            while(left < right) {
                int mid = left + (right - left) / 2;
                if (sortedList.get(mid) >= nums[i])
                    right = mid;
                else 
                    left = mid + 1;
            }
            res[i] = right;
			
            sortedList.add(right, nums[i]);
        }
        return Arrays.asList(res);
    }
}

